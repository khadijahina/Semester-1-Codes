package asynchrony;import java.util.concurrent.*;import org.omg.CORBA.TIMEOUT;/** * This is a straightforward translation of FutureDemo to use * java.util.concurrent.FutureTask *  * @author oscar * */public class FutureTaskExecDemo implements Runnable {	public static void main(String args[]) {		FutureTaskExecDemo.demo();	}	public static void demo() {		FutureTaskExecDemo server = new FutureTaskExecDemo();		System.out.println("Starting FutureDemo.demo()");		// With some luck, the faster ones may get computed first ...		// NB: results depend highly on Thread scheduling ...		startDemoExecutor(server, 45, 5);		startDemoExecutor(server, 35, 5);		startDemoExecutor(server, 20, 5);		startDemoExecutor(server, 15, 5);		startDemoExecutor(server, 5, 5);	}	protected static void startDemoExecutor(final FutureTaskExecDemo server, final int n, final int timeoutSeconds) {		ExecutorService es = Executors.newCachedThreadPool();		Runnable runnable = () -> {		try {				System.out.println("CALLING fibonacci(" + n + ")");				FutureTask<Integer> future = server.service(n);				System.out.println("GOT future(fibonacci(" + n + "))");				int val = future.get(timeoutSeconds, TimeUnit.SECONDS).intValue();				System.out.println("GOT fibonacci(" + n + ") = " + val);			} catch (InterruptedException e) {			} catch (ExecutionException e) {			} catch (TimeoutException e) {				System.out.println("Unable to calculate fibonacci(" + n + ") in " + timeoutSeconds + " seconds.");			}		};		es.submit(runnable);	}	public FutureTask<Integer> service(final int n) { // unsynchronized		ExecutorService es = Executors.newCachedThreadPool();		FutureTask<Integer> future = new FutureTask<Integer>(new Callable<Integer>() {			public Integer call() {				return new Integer(fibonacci(n));			}		});		es.submit(future);		return future;	}	public static int fibonacci(int n) {		if (n < 2)			return 1;		else			return fibonacci(n - 1) + fibonacci(n - 2);	}	@Override	public void run() {		// TODO Auto-generated method stub	}}